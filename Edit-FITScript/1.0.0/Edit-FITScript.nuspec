<?xml version="1.0"?>
<package xmlns="http://schemas.microsoft.com/packaging/2011/08/nuspec.xsd">
  <metadata>
    <id>Edit-FITScript</id>
    <version>1.0.0</version>
    <authors>Simon</authors>
    <owners>Focused IT</owners>
    <requireLicenseAcceptance>false</requireLicenseAcceptance>
    <description>Edit-FITScript - Easily edit files</description>
    <releaseNotes>1.0.0 SG - 2017.12.08 Initial Script .LINK http://www.FocusedIT.co.uk #&gt; [CmdletBinding()] Param( [Parameter(Position=0,Mandatory=$true,ValueFromPipeline=$true,ValueFromPipelineByPropertyName=$true)] [string]$FullName , [Parameter(Position=1,Mandatory=$false,ValueFromPipeline=$false,ValueFromPipelineByPropertyName=$false)] [switch]$Update , [Parameter(Position=2,Mandatory=$false,ValueFromPipeline=$false,ValueFromPipelineByPropertyName=$false)] [string]$ReleaseNote , [Parameter(Position=3,Mandatory=$false,ValueFromPipeline=$false,ValueFromPipelineByPropertyName=$false)] [switch]$Force #, #Version - Specific version? #MinorVersionIncrement? #MajorVersionIncrement? ) begin{ $File = Get-Item $FullName if($File.Extension -ne ".ps1"){ Write-Host "File is not .ps1" $NotPS1 = $true } if($Update){ if($NotPS1){ $Update = $null Write-Warning "File is not .ps1 - Update flag removed" Write-Host "No Update information will be added to the file" break } if(!($Force)){ Write-Warning "This will overwrite the existing file with the new update" #Continue Prompt while($prompt -notmatch "[YN]"){ $Prompt = Read-host "Are you sure you want to continue (Y/N)" Switch ($Prompt){ Y{ #Do Something } N {Write-Host "Ending, please re-run the command" Return } Default {continue} } } } if(!($credential)){ $credential = Get-Credential -Message "Enter Email address - password is not required" } $Date = Get-Date -Format yyyy.MM.dd } } process{ $ScriptBlock = Get-Content $FullName -RAW $ScriptBlockNoRaw = Get-Content $FullName #Get version number from script $regex = @" \d{1,3}\.\d{1,3}\.\d{1,4} "@ $VersionLine = $ScriptBlockNoRaw | select-string -Pattern $Regex -encoding ASCII -AllMatches | Where {$_.Line -Like "*Version*:*"} $Version = $VersionLine.Matches.Value if($Version.Count -gt 1){ $Version = $Version[0] } if($Version -eq $null){ Write-Warning "No Version info found in $FullName" Write-Host "Version info must take the form 'Version : x.x.x' within the script" Write-Host "No Update information will be added to the file" $Update = $null } $VersionMajor = $Version.Split(".")[0] $MajorInt = [convert]::ToInt32($VersionMajor, 10) $VersionMinor = $Version.Split(".")[1] $MinorInt = [convert]::ToInt32($VersionMinor, 10) $VersionBuild = $Version.Split(".")[2] $BuildInt = [convert]::ToInt32($VersionBuild, 10) if($BuildInt -eq 9){ $BuildInt = 0 if($MinorInt -eq 9){ $MinorInt = 0 $MajorInt++ } else { $MinorInt++ } } else { $BuildInt++ } $NewMajor = [convert]::ToString($MajorInt) $NewMinor = [convert]::ToString($MinorInt) $NewBuild = [convert]::ToString($BuildInt) $NewVer = $NewMajor + "." + $NewMinor + "." + $NewBuild if($Update){ $AuthorEmail = $Credential.Username $Author = $AuthorEmail.TrimEnd("@FocusedIT.co.uk") $Author = $Author.Replace("."," ") $FI = $Author.Substring(0,1) $space = $Author.IndexOf(" ") [int]$LIpos = $space+1 $LI = $Author.Substring($LIpos,1) $UpdateTemplate = @"</releaseNotes>
    <copyright>(c) Focused IT. All rights reserved.</copyright>
    <tags>PSModule PSIncludes_Function PSFunction_Edit-FITScript PSCommand_Edit-FITScript</tags>
  </metadata>
</package>